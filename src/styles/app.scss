// $pink: rgb(206, 123, 123);
// $black: rgb(0, 0, 0);
// $red: rgb(219, 25, 25);
// $colorArray: #24abec, #236578; //creating an array varibale in sass

$width: 2rem;

//importing partials
// @import "_colors2";
// @import "_colors";

@use "_colors" as colors; //importing as module and using as object with creating alias

// body {
//   background-color: $color1;
//   color: $color2;
//   //   background-color: nth($colorArray, 2); //array accessing
// }
//nesting in sass

// button {
//   background-color: colors.$red;
//   color: colors.$black;
//   padding: 2rem;
//   cursor: pointer;
// }

//using % in front we can create templates that wont be compiled unless used somewhere;

%custom {
  background-color: colors.$red;
  color: colors.$black;
  padding: 2rem;
  cursor: pointer;
}

//creating a function and accepting parameters
@mixin customFn($color: red) {
  background-color: $color;
  color: colors.$black;
  padding: 2rem;
  cursor: pointer;
}

.p1 {
  @include customFn
    //lets we forgot to pass the arguments but in creating that mixin we can also give a default value incase the value is not provided
    //   @include customFn(
    //     colors.$red
    //   ); //here we call that function like this and pass the arguments
;
}

.p2 {
  @include customFn(
    green
  ); //here we call that function like this and pass the arguments

  width: $width + 4; //using operators and variables

  //lets say we want give pseudo classes in nesting this rule

  &:hover {
    opacity: 0.6;
  }
}

.p3 {
  @extend %custom; //this how you inherit all the rules of other selector to this selector
}

.productCard {
  background-color: colors.$pink;
  max-width: 600px;

  //for direct child in element
  > a {
    color: colors.$black;
  }
  //for children in element
  h2 {
    color: colors.$red;
  }
}
